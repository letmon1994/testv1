body {
  background-color: #660000;
  padding: 20px;
  margin: 0;
}
h2, p, ul, li {
  font-family: sans-serif;
}
ul.header li {
  display: inline;
  list-style-type: none;
  margin: 0;
}
ul.header {
  background-color: #111;
  padding: 0;
}
ul.header li a {
  color: #FFF;
  font-weight: bold;
  text-decoration: none;
  padding: 20px;
  display: inline-block;
}
.content {
  background-color: #FFF;
  padding: 20px;
}
.content h2 {
  padding: 0;
  margin: 0;
}
.content li {
  margin-bottom: 10px;
}
.active {
  background-color: #7f0000;
}

h1 {
  font-weight: bold;
  font-family: sans-serif;
  font-size: 80px;
  color: #000000 ;
}

/*return (
  <section className="section">
    <div
      className={
        this.state.contrastMode ? "notification is-success" : "notification"
      }
    >
      <table>
        <tr>
          <Input
            name="searchText"
            label="Search by name"
            value={this.state.searchText}
            handleChange={this.handleChange}
            placeholder={"e.g. conor"}
          />
        </tr>
        <tr>
          <td>
            {" "}
            <DropDown
              options={["all", "true", "false"]}
              name="tHolderSelected"
              handleChange={this.handleChange}
              label="Filter by title holder"
              selected={this.state.tHolderSelected}
            />
          </td>
          <td>
            {" "}
            <DropDown
              options={["all"].concat(this.state.weightClassValues)}
              name="weightClassSelected"
              handleChange={this.handleChange}
              label="Filter by weight Class"
              selected={this.state.weightClassSelected}
            />
          </td>
          <td>
            {" "}
            <RadioButton
              handleChange={this.handleChange}
              checked={this.state.sort}
            />
          </td>
        </tr>
      </table>

      <div className="columns is-multiline">{fighterList}</div>
    </div>
  </section>
);
}
}
*/

/* state = {
  activeFighter: []
} */

/* componentDidMount = async () => {
  const name = this.props.location.state.fighter;
  const req = await fetch ('https://cors-anywhere.herokuapp.com/http://ufc-data-api.ufc.com/api/v3/iphone/fighters');
  const res = await req.json();
  this.setState({activeFighter: res.fighters[0]});
  console.log(this.state.activeFighter);
} */
